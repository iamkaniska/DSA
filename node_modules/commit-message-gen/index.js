// Required modules
const inquirer = require('inquirer');
const simpleGit = require('simple-git');
const git = simpleGit();

// Commit message categories following Conventional Commits
const commitTypes = [
  { type: 'feat', description: 'A new feature' },
  { type: 'fix', description: 'A bug fix' },
  { type: 'docs', description: 'Documentation only changes' },
  { type: 'style', description: 'Changes that do not affect the meaning of the code (white-space, formatting)' },
  { type: 'refactor', description: 'A code change that neither fixes a bug nor adds a feature' },
  { type: 'test', description: 'Adding missing tests or correcting existing tests' },
  { type: 'chore', description: 'Changes to the build process or auxiliary tools and libraries' }
];

// Function to generate commit message
async function generateCommitMessage() {
  // Check for git status
  const status = await git.status();
  const modifiedFiles = status.modified;

  if (modifiedFiles.length === 0) {
    console.log('No changes detected.');
    return;
  }

  console.log('Modified files:', modifiedFiles.join(', '));

  // Ask user to select commit type and write message
  const answers = await inquirer.prompt([
    {
      type: 'list',
      name: 'commitType',
      message: 'Select the type of change you are committing:',
      choices: commitTypes.map(type => ({
        name: `${type.type}: ${type.description}`,
        value: type.type
      }))
    },
    {
      type: 'input',
      name: 'scope',
      message: 'Enter the scope of changes (e.g., component or file name):',
      default: ''
    },
    {
      type: 'input',
      name: 'description',
      message: 'Write a short description of the changes:',
      validate: input => input.length > 0 || 'Description cannot be empty'
    }
  ]);

  const { commitType, scope, description } = answers;
  const scopeFormatted = scope ? `(${scope})` : '';
  const commitMessage = `${commitType}${scopeFormatted}: ${description}`;

  console.log(`\nSuggested commit message:\n${commitMessage}\n`);

  // Ask if the user wants to commit
  const confirmCommit = await inquirer.prompt([
    {
      type: 'confirm',
      name: 'confirm',
      message: 'Do you want to commit with this message?'
    }
  ]);

  if (confirmCommit.confirm) {
    await git.commit(commitMessage);
    console.log('Changes committed.');
  } else {
    console.log('Commit aborted.');
  }
}

// Export the function as the main entry point
module.exports = generateCommitMessage;
